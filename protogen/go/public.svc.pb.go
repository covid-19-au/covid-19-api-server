// Code generated by protoc-gen-go. DO NOT EDIT.
// source: public.svc.proto

package covid19api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("public.svc.proto", fileDescriptor_95a0a6b137d15da1)
}

var fileDescriptor_95a0a6b137d15da1 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xdd, 0x8b, 0x48, 0x84, 0xb5, 0xe4, 0xe0, 0x21, 0xab, 0x7b, 0x10, 0xbc, 0x66, 0x51,
	0x4f, 0x5e, 0x2b, 0x6e, 0xf1, 0x20, 0xd4, 0x15, 0xbc, 0xa7, 0xe9, 0xb4, 0x06, 0xa2, 0x13, 0x33,
	0x49, 0xa5, 0x3f, 0xda, 0xff, 0x20, 0xed, 0x36, 0xac, 0xac, 0x7a, 0x9c, 0xf7, 0x3d, 0xde, 0x9b,
	0xc7, 0x32, 0x17, 0x2b, 0x6b, 0xb4, 0xa4, 0x4e, 0x4b, 0xe7, 0x31, 0x20, 0x67, 0x1a, 0x3b, 0x53,
	0x5f, 0xdd, 0x2a, 0x67, 0xc4, 0xa2, 0x45, 0x6c, 0x2d, 0xac, 0x46, 0x52, 0xc5, 0x66, 0x05, 0x6f,
	0x2e, 0xf4, 0x5b, 0xa3, 0x58, 0xee, 0xc3, 0x4f, 0xaf, 0x9c, 0x03, 0x4f, 0x13, 0x9f, 0x6b, 0x45,
	0x20, 0x6b, 0x68, 0xa6, 0x3b, 0x6b, 0xac, 0x69, 0x5f, 0xc3, 0x4e, 0xb9, 0xfe, 0x9a, 0xb1, 0xe3,
	0x72, 0xec, 0x7f, 0x8a, 0xe0, 0x7b, 0xbe, 0x66, 0xf3, 0x07, 0x7a, 0x06, 0xdf, 0x19, 0x0d, 0x1b,
	0x50, 0x75, 0xcf, 0x4f, 0xe5, 0xb6, 0x44, 0xa6, 0x12, 0x79, 0x3f, 0x7c, 0x20, 0xc4, 0x2f, 0x3d,
	0x47, 0xb4, 0x2f, 0xca, 0x46, 0xb8, 0x38, 0xe0, 0x05, 0x3b, 0x2a, 0x20, 0xdc, 0x29, 0x02, 0xe2,
	0x0b, 0xb9, 0xdb, 0x23, 0x93, 0xba, 0x81, 0x8f, 0x08, 0x14, 0xc4, 0xd9, 0xdf, 0x90, 0x1c, 0xbe,
	0xd3, 0x10, 0xf4, 0xc8, 0x58, 0x01, 0x61, 0x3d, 0xfe, 0x4d, 0xfc, 0x7c, 0xcf, 0x3d, 0xe9, 0x29,
	0x6c, 0xf9, 0x1f, 0x4e, 0x71, 0xf9, 0x25, 0x3b, 0x41, 0xdf, 0x26, 0x9b, 0x54, 0xce, 0xe4, 0xd9,
	0x8f, 0xfd, 0xe5, 0xb0, 0xa5, 0x9c, 0x55, 0x87, 0xe3, 0xa8, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x28, 0xaa, 0xf1, 0x9c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicQueryClient is the client API for PublicQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicQueryClient interface {
	IsServiceReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	GetCases(ctx context.Context, in *GetCasesRequest, opts ...grpc.CallOption) (*GetCasesResponse, error)
	GetFlights(ctx context.Context, in *GetFlightsRequest, opts ...grpc.CallOption) (*GetFlightsResponse, error)
}

type publicQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicQueryClient(cc grpc.ClientConnInterface) PublicQueryClient {
	return &publicQueryClient{cc}
}

func (c *publicQueryClient) IsServiceReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/IsServiceReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicQueryClient) GetCases(ctx context.Context, in *GetCasesRequest, opts ...grpc.CallOption) (*GetCasesResponse, error) {
	out := new(GetCasesResponse)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/GetCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicQueryClient) GetFlights(ctx context.Context, in *GetFlightsRequest, opts ...grpc.CallOption) (*GetFlightsResponse, error) {
	out := new(GetFlightsResponse)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/GetFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicQueryServer is the server API for PublicQuery service.
type PublicQueryServer interface {
	IsServiceReady(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	GetCases(context.Context, *GetCasesRequest) (*GetCasesResponse, error)
	GetFlights(context.Context, *GetFlightsRequest) (*GetFlightsResponse, error)
}

// UnimplementedPublicQueryServer can be embedded to have forward compatible implementations.
type UnimplementedPublicQueryServer struct {
}

func (*UnimplementedPublicQueryServer) IsServiceReady(ctx context.Context, req *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsServiceReady not implemented")
}
func (*UnimplementedPublicQueryServer) GetCases(ctx context.Context, req *GetCasesRequest) (*GetCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCases not implemented")
}
func (*UnimplementedPublicQueryServer) GetFlights(ctx context.Context, req *GetFlightsRequest) (*GetFlightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlights not implemented")
}

func RegisterPublicQueryServer(s *grpc.Server, srv PublicQueryServer) {
	s.RegisterService(&_PublicQuery_serviceDesc, srv)
}

func _PublicQuery_IsServiceReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).IsServiceReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/IsServiceReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).IsServiceReady(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicQuery_GetCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).GetCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/GetCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).GetCases(ctx, req.(*GetCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicQuery_GetFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).GetFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/GetFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).GetFlights(ctx, req.(*GetFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covid19api.PublicQuery",
	HandlerType: (*PublicQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsServiceReady",
			Handler:    _PublicQuery_IsServiceReady_Handler,
		},
		{
			MethodName: "GetCases",
			Handler:    _PublicQuery_GetCases_Handler,
		},
		{
			MethodName: "GetFlights",
			Handler:    _PublicQuery_GetFlights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.svc.proto",
}
