// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: public.svc.proto

package covid19api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_public_svc_proto protoreflect.FileDescriptor

var file_public_svc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xc2, 0x02,
	0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a,
	0x0e, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x33, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x31,
	0x39, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x3b, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x31, 0x39, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_public_svc_proto_goTypes = []interface{}{
	(*empty.Empty)(nil),          // 0: google.protobuf.Empty
	(*GetCasesRequest)(nil),      // 1: covid19api.GetCasesRequest
	(*GetCaseStatsRequest)(nil),  // 2: covid19api.GetCaseStatsRequest
	(*GetFlightsRequest)(nil),    // 3: covid19api.GetFlightsRequest
	(*wrappers.BoolValue)(nil),   // 4: google.protobuf.BoolValue
	(*GetCasesResponse)(nil),     // 5: covid19api.GetCasesResponse
	(*GetCaseStatsResponse)(nil), // 6: covid19api.GetCaseStatsResponse
	(*GetFlightsResponse)(nil),   // 7: covid19api.GetFlightsResponse
}
var file_public_svc_proto_depIdxs = []int32{
	0, // 0: covid19api.PublicQuery.IsServiceReady:input_type -> google.protobuf.Empty
	1, // 1: covid19api.PublicQuery.GetCases:input_type -> covid19api.GetCasesRequest
	2, // 2: covid19api.PublicQuery.GetCaseStats:input_type -> covid19api.GetCaseStatsRequest
	3, // 3: covid19api.PublicQuery.GetFlights:input_type -> covid19api.GetFlightsRequest
	4, // 4: covid19api.PublicQuery.IsServiceReady:output_type -> google.protobuf.BoolValue
	5, // 5: covid19api.PublicQuery.GetCases:output_type -> covid19api.GetCasesResponse
	6, // 6: covid19api.PublicQuery.GetCaseStats:output_type -> covid19api.GetCaseStatsResponse
	7, // 7: covid19api.PublicQuery.GetFlights:output_type -> covid19api.GetFlightsResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_public_svc_proto_init() }
func file_public_svc_proto_init() {
	if File_public_svc_proto != nil {
		return
	}
	file_case_def_proto_init()
	file_flight_def_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_svc_proto_goTypes,
		DependencyIndexes: file_public_svc_proto_depIdxs,
	}.Build()
	File_public_svc_proto = out.File
	file_public_svc_proto_rawDesc = nil
	file_public_svc_proto_goTypes = nil
	file_public_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicQueryClient is the client API for PublicQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicQueryClient interface {
	IsServiceReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	GetCases(ctx context.Context, in *GetCasesRequest, opts ...grpc.CallOption) (*GetCasesResponse, error)
	GetCaseStats(ctx context.Context, in *GetCaseStatsRequest, opts ...grpc.CallOption) (*GetCaseStatsResponse, error)
	GetFlights(ctx context.Context, in *GetFlightsRequest, opts ...grpc.CallOption) (*GetFlightsResponse, error)
}

type publicQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicQueryClient(cc grpc.ClientConnInterface) PublicQueryClient {
	return &publicQueryClient{cc}
}

func (c *publicQueryClient) IsServiceReady(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/IsServiceReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicQueryClient) GetCases(ctx context.Context, in *GetCasesRequest, opts ...grpc.CallOption) (*GetCasesResponse, error) {
	out := new(GetCasesResponse)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/GetCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicQueryClient) GetCaseStats(ctx context.Context, in *GetCaseStatsRequest, opts ...grpc.CallOption) (*GetCaseStatsResponse, error) {
	out := new(GetCaseStatsResponse)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/GetCaseStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicQueryClient) GetFlights(ctx context.Context, in *GetFlightsRequest, opts ...grpc.CallOption) (*GetFlightsResponse, error) {
	out := new(GetFlightsResponse)
	err := c.cc.Invoke(ctx, "/covid19api.PublicQuery/GetFlights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicQueryServer is the server API for PublicQuery service.
type PublicQueryServer interface {
	IsServiceReady(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	GetCases(context.Context, *GetCasesRequest) (*GetCasesResponse, error)
	GetCaseStats(context.Context, *GetCaseStatsRequest) (*GetCaseStatsResponse, error)
	GetFlights(context.Context, *GetFlightsRequest) (*GetFlightsResponse, error)
}

// UnimplementedPublicQueryServer can be embedded to have forward compatible implementations.
type UnimplementedPublicQueryServer struct {
}

func (*UnimplementedPublicQueryServer) IsServiceReady(context.Context, *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsServiceReady not implemented")
}
func (*UnimplementedPublicQueryServer) GetCases(context.Context, *GetCasesRequest) (*GetCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCases not implemented")
}
func (*UnimplementedPublicQueryServer) GetCaseStats(context.Context, *GetCaseStatsRequest) (*GetCaseStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaseStats not implemented")
}
func (*UnimplementedPublicQueryServer) GetFlights(context.Context, *GetFlightsRequest) (*GetFlightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlights not implemented")
}

func RegisterPublicQueryServer(s *grpc.Server, srv PublicQueryServer) {
	s.RegisterService(&_PublicQuery_serviceDesc, srv)
}

func _PublicQuery_IsServiceReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).IsServiceReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/IsServiceReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).IsServiceReady(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicQuery_GetCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).GetCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/GetCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).GetCases(ctx, req.(*GetCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicQuery_GetCaseStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).GetCaseStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/GetCaseStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).GetCaseStats(ctx, req.(*GetCaseStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicQuery_GetFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicQueryServer).GetFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covid19api.PublicQuery/GetFlights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicQueryServer).GetFlights(ctx, req.(*GetFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covid19api.PublicQuery",
	HandlerType: (*PublicQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsServiceReady",
			Handler:    _PublicQuery_IsServiceReady_Handler,
		},
		{
			MethodName: "GetCases",
			Handler:    _PublicQuery_GetCases_Handler,
		},
		{
			MethodName: "GetCaseStats",
			Handler:    _PublicQuery_GetCaseStats_Handler,
		},
		{
			MethodName: "GetFlights",
			Handler:    _PublicQuery_GetFlights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.svc.proto",
}
