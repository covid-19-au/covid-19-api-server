// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: case.def.proto

package covid19api

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ExistingCaseDetail) Validate() error {
	if this.CaseId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("CaseId", fmt.Errorf(`value '%v' must not be an empty string`, this.CaseId))
	}
	if !(this.ReportedTime > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ReportedTime", fmt.Errorf(`value '%v' must be greater than '0'`, this.ReportedTime))
	}
	if _, ok := CaseState_name[int32(this.State)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("State", fmt.Errorf(`value '%v' must be a valid CaseState field`, this.State))
	}
	if _, ok := InfectionSource_name[int32(this.InfectSrc)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("InfectSrc", fmt.Errorf(`value '%v' must be a valid InfectionSource field`, this.InfectSrc))
	}
	if nil == this.Location {
		return github_com_mwitkow_go_proto_validators.FieldError("Location", fmt.Errorf("message must exist"))
	}
	if this.Location != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Location); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Location", err)
		}
	}
	return nil
}
func (this *NewCaseDetail) Validate() error {
	if !(this.ReportedTime > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ReportedTime", fmt.Errorf(`value '%v' must be greater than '0'`, this.ReportedTime))
	}
	if _, ok := CaseState_name[int32(this.State)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("State", fmt.Errorf(`value '%v' must be a valid CaseState field`, this.State))
	}
	if _, ok := InfectionSource_name[int32(this.InfectSrc)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("InfectSrc", fmt.Errorf(`value '%v' must be a valid InfectionSource field`, this.InfectSrc))
	}
	if nil == this.Location {
		return github_com_mwitkow_go_proto_validators.FieldError("Location", fmt.Errorf("message must exist"))
	}
	if this.Location != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Location); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Location", err)
		}
	}
	return nil
}
func (this *GetCasesRequest) Validate() error {
	if this.Location != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Location); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Location", err)
		}
	}
	if len(this.States) < 1 {
		return github_com_mwitkow_go_proto_validators.FieldError("States", fmt.Errorf(`value '%v' must contain at least 1 elements`, this.States))
	}
	if !(this.StartTime > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("StartTime", fmt.Errorf(`value '%v' must be greater than '0'`, this.StartTime))
	}
	if !(this.EndTime > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("EndTime", fmt.Errorf(`value '%v' must be greater than '0'`, this.EndTime))
	}
	return nil
}
func (this *GetCasesResponse) Validate() error {
	if this.Pagination != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Pagination); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Pagination", err)
		}
	}
	for _, item := range this.Cases {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Cases", err)
			}
		}
	}
	return nil
}
func (this *GetCaseStatsRequest) Validate() error {
	return nil
}
func (this *GetCaseStatsResponse) Validate() error {
	return nil
}
func (this *AddCasesRequest) Validate() error {
	if len(this.Cases) < 1 {
		return github_com_mwitkow_go_proto_validators.FieldError("Cases", fmt.Errorf(`value '%v' must contain at least 1 elements`, this.Cases))
	}
	for _, item := range this.Cases {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Cases", err)
			}
		}
	}
	return nil
}
func (this *PutCasesRequest) Validate() error {
	if len(this.Cases) < 1 {
		return github_com_mwitkow_go_proto_validators.FieldError("Cases", fmt.Errorf(`value '%v' must contain at least 1 elements`, this.Cases))
	}
	for _, item := range this.Cases {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Cases", err)
			}
		}
	}
	return nil
}
func (this *DelCasesRequest) Validate() error {
	if len(this.CaseIds) < 1 {
		return github_com_mwitkow_go_proto_validators.FieldError("CaseIds", fmt.Errorf(`value '%v' must contain at least 1 elements`, this.CaseIds))
	}
	return nil
}
